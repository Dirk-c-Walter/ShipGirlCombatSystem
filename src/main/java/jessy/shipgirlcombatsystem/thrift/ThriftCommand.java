/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jessy.shipgirlcombatsystem.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-27")
public class ThriftCommand implements org.apache.thrift.TBase<ThriftCommand, ThriftCommand._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftCommand> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftCommand");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField COMMAND_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commandCode", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NEW_SHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("newShip", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftCommandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftCommandTupleSchemeFactory());
  }

  public String type; // required
  public String sourceId; // optional
  public Map<String,String> properties; // optional
  /**
   * 
   * @see ThriftCommandEnum
   */
  public ThriftCommandEnum commandCode; // optional
  public ThriftShip newShip; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    SOURCE_ID((short)2, "sourceId"),
    PROPERTIES((short)3, "properties"),
    /**
     * 
     * @see ThriftCommandEnum
     */
    COMMAND_CODE((short)4, "commandCode"),
    NEW_SHIP((short)5, "newShip");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // SOURCE_ID
          return SOURCE_ID;
        case 3: // PROPERTIES
          return PROPERTIES;
        case 4: // COMMAND_CODE
          return COMMAND_CODE;
        case 5: // NEW_SHIP
          return NEW_SHIP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SOURCE_ID,_Fields.PROPERTIES,_Fields.COMMAND_CODE,_Fields.NEW_SHIP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMMAND_CODE, new org.apache.thrift.meta_data.FieldMetaData("commandCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftCommandEnum.class)));
    tmpMap.put(_Fields.NEW_SHIP, new org.apache.thrift.meta_data.FieldMetaData("newShip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftShip.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftCommand.class, metaDataMap);
  }

  public ThriftCommand() {
  }

  public ThriftCommand(
    String type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftCommand(ThriftCommand other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetSourceId()) {
      this.sourceId = other.sourceId;
    }
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetCommandCode()) {
      this.commandCode = other.commandCode;
    }
    if (other.isSetNewShip()) {
      this.newShip = new ThriftShip(other.newShip);
    }
  }

  public ThriftCommand deepCopy() {
    return new ThriftCommand(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.sourceId = null;
    this.properties = null;
    this.commandCode = null;
    this.newShip = null;
  }

  public String getType() {
    return this.type;
  }

  public ThriftCommand setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getSourceId() {
    return this.sourceId;
  }

  public ThriftCommand setSourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  public void unsetSourceId() {
    this.sourceId = null;
  }

  /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceId() {
    return this.sourceId != null;
  }

  public void setSourceIdIsSet(boolean value) {
    if (!value) {
      this.sourceId = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public ThriftCommand setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  /**
   * 
   * @see ThriftCommandEnum
   */
  public ThriftCommandEnum getCommandCode() {
    return this.commandCode;
  }

  /**
   * 
   * @see ThriftCommandEnum
   */
  public ThriftCommand setCommandCode(ThriftCommandEnum commandCode) {
    this.commandCode = commandCode;
    return this;
  }

  public void unsetCommandCode() {
    this.commandCode = null;
  }

  /** Returns true if field commandCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommandCode() {
    return this.commandCode != null;
  }

  public void setCommandCodeIsSet(boolean value) {
    if (!value) {
      this.commandCode = null;
    }
  }

  public ThriftShip getNewShip() {
    return this.newShip;
  }

  public ThriftCommand setNewShip(ThriftShip newShip) {
    this.newShip = newShip;
    return this;
  }

  public void unsetNewShip() {
    this.newShip = null;
  }

  /** Returns true if field newShip is set (has been assigned a value) and false otherwise */
  public boolean isSetNewShip() {
    return this.newShip != null;
  }

  public void setNewShipIsSet(boolean value) {
    if (!value) {
      this.newShip = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    case COMMAND_CODE:
      if (value == null) {
        unsetCommandCode();
      } else {
        setCommandCode((ThriftCommandEnum)value);
      }
      break;

    case NEW_SHIP:
      if (value == null) {
        unsetNewShip();
      } else {
        setNewShip((ThriftShip)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case SOURCE_ID:
      return getSourceId();

    case PROPERTIES:
      return getProperties();

    case COMMAND_CODE:
      return getCommandCode();

    case NEW_SHIP:
      return getNewShip();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case SOURCE_ID:
      return isSetSourceId();
    case PROPERTIES:
      return isSetProperties();
    case COMMAND_CODE:
      return isSetCommandCode();
    case NEW_SHIP:
      return isSetNewShip();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftCommand)
      return this.equals((ThriftCommand)that);
    return false;
  }

  public boolean equals(ThriftCommand that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_sourceId = true && this.isSetSourceId();
    boolean that_present_sourceId = true && that.isSetSourceId();
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (!this.sourceId.equals(that.sourceId))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_commandCode = true && this.isSetCommandCode();
    boolean that_present_commandCode = true && that.isSetCommandCode();
    if (this_present_commandCode || that_present_commandCode) {
      if (!(this_present_commandCode && that_present_commandCode))
        return false;
      if (!this.commandCode.equals(that.commandCode))
        return false;
    }

    boolean this_present_newShip = true && this.isSetNewShip();
    boolean that_present_newShip = true && that.isSetNewShip();
    if (this_present_newShip || that_present_newShip) {
      if (!(this_present_newShip && that_present_newShip))
        return false;
      if (!this.newShip.equals(that.newShip))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_sourceId = true && (isSetSourceId());
    list.add(present_sourceId);
    if (present_sourceId)
      list.add(sourceId);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_commandCode = true && (isSetCommandCode());
    list.add(present_commandCode);
    if (present_commandCode)
      list.add(commandCode.getValue());

    boolean present_newShip = true && (isSetNewShip());
    list.add(present_newShip);
    if (present_newShip)
      list.add(newShip);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftCommand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommandCode()).compareTo(other.isSetCommandCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommandCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commandCode, other.commandCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewShip()).compareTo(other.isSetNewShip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewShip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newShip, other.newShip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftCommand(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetSourceId()) {
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      if (this.sourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceId);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetCommandCode()) {
      if (!first) sb.append(", ");
      sb.append("commandCode:");
      if (this.commandCode == null) {
        sb.append("null");
      } else {
        sb.append(this.commandCode);
      }
      first = false;
    }
    if (isSetNewShip()) {
      if (!first) sb.append(", ");
      sb.append("newShip:");
      if (this.newShip == null) {
        sb.append("null");
      } else {
        sb.append(this.newShip);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (newShip != null) {
      newShip.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftCommandStandardSchemeFactory implements SchemeFactory {
    public ThriftCommandStandardScheme getScheme() {
      return new ThriftCommandStandardScheme();
    }
  }

  private static class ThriftCommandStandardScheme extends StandardScheme<ThriftCommand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceId = iprot.readString();
              struct.setSourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map54.size);
                String _key55;
                String _val56;
                for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                {
                  _key55 = iprot.readString();
                  _val56 = iprot.readString();
                  struct.properties.put(_key55, _val56);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMAND_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commandCode = jessy.shipgirlcombatsystem.thrift.ThriftCommandEnum.findByValue(iprot.readI32());
              struct.setCommandCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEW_SHIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.newShip = new ThriftShip();
              struct.newShip.read(iprot);
              struct.setNewShipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftCommand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.sourceId != null) {
        if (struct.isSetSourceId()) {
          oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.sourceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (Map.Entry<String, String> _iter58 : struct.properties.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              oprot.writeString(_iter58.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.commandCode != null) {
        if (struct.isSetCommandCode()) {
          oprot.writeFieldBegin(COMMAND_CODE_FIELD_DESC);
          oprot.writeI32(struct.commandCode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.newShip != null) {
        if (struct.isSetNewShip()) {
          oprot.writeFieldBegin(NEW_SHIP_FIELD_DESC);
          struct.newShip.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftCommandTupleSchemeFactory implements SchemeFactory {
    public ThriftCommandTupleScheme getScheme() {
      return new ThriftCommandTupleScheme();
    }
  }

  private static class ThriftCommandTupleScheme extends TupleScheme<ThriftCommand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetSourceId()) {
        optionals.set(1);
      }
      if (struct.isSetProperties()) {
        optionals.set(2);
      }
      if (struct.isSetCommandCode()) {
        optionals.set(3);
      }
      if (struct.isSetNewShip()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetSourceId()) {
        oprot.writeString(struct.sourceId);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, String> _iter59 : struct.properties.entrySet())
          {
            oprot.writeString(_iter59.getKey());
            oprot.writeString(_iter59.getValue());
          }
        }
      }
      if (struct.isSetCommandCode()) {
        oprot.writeI32(struct.commandCode.getValue());
      }
      if (struct.isSetNewShip()) {
        struct.newShip.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sourceId = iprot.readString();
        struct.setSourceIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new HashMap<String,String>(2*_map60.size);
          String _key61;
          String _val62;
          for (int _i63 = 0; _i63 < _map60.size; ++_i63)
          {
            _key61 = iprot.readString();
            _val62 = iprot.readString();
            struct.properties.put(_key61, _val62);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commandCode = jessy.shipgirlcombatsystem.thrift.ThriftCommandEnum.findByValue(iprot.readI32());
        struct.setCommandCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.newShip = new ThriftShip();
        struct.newShip.read(iprot);
        struct.setNewShipIsSet(true);
      }
    }
  }

}

