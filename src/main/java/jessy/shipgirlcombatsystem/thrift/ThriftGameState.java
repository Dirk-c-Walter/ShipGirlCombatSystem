/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jessy.shipgirlcombatsystem.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-19")
public class ThriftGameState implements org.apache.thrift.TBase<ThriftGameState, ThriftGameState._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftGameState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftGameState");

  private static final org.apache.thrift.protocol.TField MAP_RADIOUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapRadious", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TURN_FIELD_DESC = new org.apache.thrift.protocol.TField("turn", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PHASE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("phaseCode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftGameStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftGameStateTupleSchemeFactory());
  }

  public int mapRadious; // required
  public int turn; // required
  public int phaseCode; // required
  public List<ThriftShip> items; // optional
  public List<String> messages; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAP_RADIOUS((short)1, "mapRadious"),
    TURN((short)2, "turn"),
    PHASE_CODE((short)3, "phaseCode"),
    ITEMS((short)4, "items"),
    MESSAGES((short)5, "messages");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAP_RADIOUS
          return MAP_RADIOUS;
        case 2: // TURN
          return TURN;
        case 3: // PHASE_CODE
          return PHASE_CODE;
        case 4: // ITEMS
          return ITEMS;
        case 5: // MESSAGES
          return MESSAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAPRADIOUS_ISSET_ID = 0;
  private static final int __TURN_ISSET_ID = 1;
  private static final int __PHASECODE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ITEMS,_Fields.MESSAGES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAP_RADIOUS, new org.apache.thrift.meta_data.FieldMetaData("mapRadious", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN, new org.apache.thrift.meta_data.FieldMetaData("turn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHASE_CODE, new org.apache.thrift.meta_data.FieldMetaData("phaseCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftShip.class))));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftGameState.class, metaDataMap);
  }

  public ThriftGameState() {
  }

  public ThriftGameState(
    int mapRadious,
    int turn,
    int phaseCode)
  {
    this();
    this.mapRadious = mapRadious;
    setMapRadiousIsSet(true);
    this.turn = turn;
    setTurnIsSet(true);
    this.phaseCode = phaseCode;
    setPhaseCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftGameState(ThriftGameState other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mapRadious = other.mapRadious;
    this.turn = other.turn;
    this.phaseCode = other.phaseCode;
    if (other.isSetItems()) {
      List<ThriftShip> __this__items = new ArrayList<ThriftShip>(other.items.size());
      for (ThriftShip other_element : other.items) {
        __this__items.add(new ThriftShip(other_element));
      }
      this.items = __this__items;
    }
    if (other.isSetMessages()) {
      List<String> __this__messages = new ArrayList<String>(other.messages);
      this.messages = __this__messages;
    }
  }

  public ThriftGameState deepCopy() {
    return new ThriftGameState(this);
  }

  @Override
  public void clear() {
    setMapRadiousIsSet(false);
    this.mapRadious = 0;
    setTurnIsSet(false);
    this.turn = 0;
    setPhaseCodeIsSet(false);
    this.phaseCode = 0;
    this.items = null;
    this.messages = null;
  }

  public int getMapRadious() {
    return this.mapRadious;
  }

  public ThriftGameState setMapRadious(int mapRadious) {
    this.mapRadious = mapRadious;
    setMapRadiousIsSet(true);
    return this;
  }

  public void unsetMapRadious() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPRADIOUS_ISSET_ID);
  }

  /** Returns true if field mapRadious is set (has been assigned a value) and false otherwise */
  public boolean isSetMapRadious() {
    return EncodingUtils.testBit(__isset_bitfield, __MAPRADIOUS_ISSET_ID);
  }

  public void setMapRadiousIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPRADIOUS_ISSET_ID, value);
  }

  public int getTurn() {
    return this.turn;
  }

  public ThriftGameState setTurn(int turn) {
    this.turn = turn;
    setTurnIsSet(true);
    return this;
  }

  public void unsetTurn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURN_ISSET_ID);
  }

  /** Returns true if field turn is set (has been assigned a value) and false otherwise */
  public boolean isSetTurn() {
    return EncodingUtils.testBit(__isset_bitfield, __TURN_ISSET_ID);
  }

  public void setTurnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURN_ISSET_ID, value);
  }

  public int getPhaseCode() {
    return this.phaseCode;
  }

  public ThriftGameState setPhaseCode(int phaseCode) {
    this.phaseCode = phaseCode;
    setPhaseCodeIsSet(true);
    return this;
  }

  public void unsetPhaseCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PHASECODE_ISSET_ID);
  }

  /** Returns true if field phaseCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPhaseCode() {
    return EncodingUtils.testBit(__isset_bitfield, __PHASECODE_ISSET_ID);
  }

  public void setPhaseCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PHASECODE_ISSET_ID, value);
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<ThriftShip> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(ThriftShip elem) {
    if (this.items == null) {
      this.items = new ArrayList<ThriftShip>();
    }
    this.items.add(elem);
  }

  public List<ThriftShip> getItems() {
    return this.items;
  }

  public ThriftGameState setItems(List<ThriftShip> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public int getMessagesSize() {
    return (this.messages == null) ? 0 : this.messages.size();
  }

  public java.util.Iterator<String> getMessagesIterator() {
    return (this.messages == null) ? null : this.messages.iterator();
  }

  public void addToMessages(String elem) {
    if (this.messages == null) {
      this.messages = new ArrayList<String>();
    }
    this.messages.add(elem);
  }

  public List<String> getMessages() {
    return this.messages;
  }

  public ThriftGameState setMessages(List<String> messages) {
    this.messages = messages;
    return this;
  }

  public void unsetMessages() {
    this.messages = null;
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return this.messages != null;
  }

  public void setMessagesIsSet(boolean value) {
    if (!value) {
      this.messages = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAP_RADIOUS:
      if (value == null) {
        unsetMapRadious();
      } else {
        setMapRadious((Integer)value);
      }
      break;

    case TURN:
      if (value == null) {
        unsetTurn();
      } else {
        setTurn((Integer)value);
      }
      break;

    case PHASE_CODE:
      if (value == null) {
        unsetPhaseCode();
      } else {
        setPhaseCode((Integer)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<ThriftShip>)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAP_RADIOUS:
      return getMapRadious();

    case TURN:
      return getTurn();

    case PHASE_CODE:
      return getPhaseCode();

    case ITEMS:
      return getItems();

    case MESSAGES:
      return getMessages();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAP_RADIOUS:
      return isSetMapRadious();
    case TURN:
      return isSetTurn();
    case PHASE_CODE:
      return isSetPhaseCode();
    case ITEMS:
      return isSetItems();
    case MESSAGES:
      return isSetMessages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftGameState)
      return this.equals((ThriftGameState)that);
    return false;
  }

  public boolean equals(ThriftGameState that) {
    if (that == null)
      return false;

    boolean this_present_mapRadious = true;
    boolean that_present_mapRadious = true;
    if (this_present_mapRadious || that_present_mapRadious) {
      if (!(this_present_mapRadious && that_present_mapRadious))
        return false;
      if (this.mapRadious != that.mapRadious)
        return false;
    }

    boolean this_present_turn = true;
    boolean that_present_turn = true;
    if (this_present_turn || that_present_turn) {
      if (!(this_present_turn && that_present_turn))
        return false;
      if (this.turn != that.turn)
        return false;
    }

    boolean this_present_phaseCode = true;
    boolean that_present_phaseCode = true;
    if (this_present_phaseCode || that_present_phaseCode) {
      if (!(this_present_phaseCode && that_present_phaseCode))
        return false;
      if (this.phaseCode != that.phaseCode)
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_messages = true && this.isSetMessages();
    boolean that_present_messages = true && that.isSetMessages();
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (!this.messages.equals(that.messages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mapRadious = true;
    list.add(present_mapRadious);
    if (present_mapRadious)
      list.add(mapRadious);

    boolean present_turn = true;
    list.add(present_turn);
    if (present_turn)
      list.add(turn);

    boolean present_phaseCode = true;
    list.add(present_phaseCode);
    if (present_phaseCode)
      list.add(phaseCode);

    boolean present_items = true && (isSetItems());
    list.add(present_items);
    if (present_items)
      list.add(items);

    boolean present_messages = true && (isSetMessages());
    list.add(present_messages);
    if (present_messages)
      list.add(messages);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftGameState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMapRadious()).compareTo(other.isSetMapRadious());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapRadious()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapRadious, other.mapRadious);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurn()).compareTo(other.isSetTurn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turn, other.turn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhaseCode()).compareTo(other.isSetPhaseCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhaseCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phaseCode, other.phaseCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftGameState(");
    boolean first = true;

    sb.append("mapRadious:");
    sb.append(this.mapRadious);
    first = false;
    if (!first) sb.append(", ");
    sb.append("turn:");
    sb.append(this.turn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phaseCode:");
    sb.append(this.phaseCode);
    first = false;
    if (isSetItems()) {
      if (!first) sb.append(", ");
      sb.append("items:");
      if (this.items == null) {
        sb.append("null");
      } else {
        sb.append(this.items);
      }
      first = false;
    }
    if (isSetMessages()) {
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftGameStateStandardSchemeFactory implements SchemeFactory {
    public ThriftGameStateStandardScheme getScheme() {
      return new ThriftGameStateStandardScheme();
    }
  }

  private static class ThriftGameStateStandardScheme extends StandardScheme<ThriftGameState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftGameState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAP_RADIOUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapRadious = iprot.readI32();
              struct.setMapRadiousIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TURN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.turn = iprot.readI32();
              struct.setTurnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PHASE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.phaseCode = iprot.readI32();
              struct.setPhaseCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.items = new ArrayList<ThriftShip>(_list28.size);
                ThriftShip _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = new ThriftShip();
                  _elem29.read(iprot);
                  struct.items.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.messages = new ArrayList<String>(_list31.size);
                String _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = iprot.readString();
                  struct.messages.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftGameState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAP_RADIOUS_FIELD_DESC);
      oprot.writeI32(struct.mapRadious);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TURN_FIELD_DESC);
      oprot.writeI32(struct.turn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PHASE_CODE_FIELD_DESC);
      oprot.writeI32(struct.phaseCode);
      oprot.writeFieldEnd();
      if (struct.items != null) {
        if (struct.isSetItems()) {
          oprot.writeFieldBegin(ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
            for (ThriftShip _iter34 : struct.items)
            {
              _iter34.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messages != null) {
        if (struct.isSetMessages()) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.messages.size()));
            for (String _iter35 : struct.messages)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftGameStateTupleSchemeFactory implements SchemeFactory {
    public ThriftGameStateTupleScheme getScheme() {
      return new ThriftGameStateTupleScheme();
    }
  }

  private static class ThriftGameStateTupleScheme extends TupleScheme<ThriftGameState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftGameState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMapRadious()) {
        optionals.set(0);
      }
      if (struct.isSetTurn()) {
        optionals.set(1);
      }
      if (struct.isSetPhaseCode()) {
        optionals.set(2);
      }
      if (struct.isSetItems()) {
        optionals.set(3);
      }
      if (struct.isSetMessages()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMapRadious()) {
        oprot.writeI32(struct.mapRadious);
      }
      if (struct.isSetTurn()) {
        oprot.writeI32(struct.turn);
      }
      if (struct.isSetPhaseCode()) {
        oprot.writeI32(struct.phaseCode);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (ThriftShip _iter36 : struct.items)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetMessages()) {
        {
          oprot.writeI32(struct.messages.size());
          for (String _iter37 : struct.messages)
          {
            oprot.writeString(_iter37);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftGameState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.mapRadious = iprot.readI32();
        struct.setMapRadiousIsSet(true);
      }
      if (incoming.get(1)) {
        struct.turn = iprot.readI32();
        struct.setTurnIsSet(true);
      }
      if (incoming.get(2)) {
        struct.phaseCode = iprot.readI32();
        struct.setPhaseCodeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list38 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new ArrayList<ThriftShip>(_list38.size);
          ThriftShip _elem39;
          for (int _i40 = 0; _i40 < _list38.size; ++_i40)
          {
            _elem39 = new ThriftShip();
            _elem39.read(iprot);
            struct.items.add(_elem39);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.messages = new ArrayList<String>(_list41.size);
          String _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = iprot.readString();
            struct.messages.add(_elem42);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }
  }

}

